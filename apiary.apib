FORMAT: 1A
HOST: https://grafmuvi.herokuapp.com/api

# GrafMuvi
*GrafMuvi* is a RESTful API that can support movie recommendation systems. The principal idea is to make movie recommendations public, i.e. to allow you to promote a movie recommendation by posting a request, if you find movies similar too each other. Because different people notice different things and therefore make different associations, you can also downgrade a promotion if you don't agree with it. But to be honest do we really need an API to do all this? Although it makes the process easier, we could also just make a public accesible database with which anyone could communicate. 

A public database could be problematic, since you could take advantage of it and promote irreasonable requests (e.g. promoting a horror like [It](https://www.imdb.com/title/tt1396484/) and a family movie like [Cars](https://www.imdb.com/title/tt0317219/)). This is where *GrafMuvi* API really becomes useful. There are three ways how this API protects *Neo4J* from human error and exploitation.

Why should you use it? Imagine yourself laying on the couch at home. You have absolutely no idea what movie to watch, but you want to watch one. A friend recommended you this API and you decide to check it out. What can you do? Well, if you know what kind of movie you want to watch (f.e. similar to The godfather), you can type a get request to see which movies associated other people to this movie and maybe you can find yourself a good movie recommendation. But don't forget to post a promotion request about which movie do you find similar to the one you found after you're done watching it soo that the API will become more and more efficient.
###be u# 1. Checking plot similarity 
Using a [pre-trained Word Embedding model](https://github.com/turbomaze/word2vecjson/tree/master/data) we will try to figure out whether plots are similar and therefore you won't be able to promote relationships between movies which have completely different plots. Word Embedding is a language modelling and feature learning technique in Natural Language Processing (*NLP*), where words and phrases are mapped into vectors of real numbers. The more similar are the vectors the more similar are the words that determine these vectors. How will you be denied promoting irreasonable relationships?

Firstly we will exclude stopwords from the process, since they don't tell us anything about the plot. Then we will calculate the mean of all the remaining words of the plot and thus getting only one vector for each plot. In the end, we calculate the vector similarity using [Cosine Similarity function](https://en.wikipedia.org/wiki/Cosine_similarity). If the cosine vector similarity ratio is lower than 0.5 then we presume that your promotion is irreasonable and we deny it.
#### 2. Checking whether genres are compatible
Furthermore genres compatibility will be checked. What does that mean for you? Well, horror movies and family movies don't really seem to have much in common and therefore you won't be able to create a connection between movies of these two genres. We created a graph where each nodes represents a genre and is connected to multiple other nodes (genres), meaning that the genres can be compatible or in other words that a movie can represent both genres at the same time. Firstly the API checks if the movies, of which relationship you promote, have genres in common (if it does, the API allows you to post the request). Additionally it goes one level further by checking if there are any nodes to which both of the genres are directly connected. In this case we also allow your request to be posted. 
#### 3. Checking IP
If we would allow countless post request to each user, malicious users could take advantage of this by posting a request a lot of times and thus distort the true amount of people that promotes/downgrades a connection. Even more, these users could promote connections that may not be the most reasonable but still surpass the rules above. That is why you will only be allowed 20 consecutive post requests with less than 30 minutes between them from the same IP. This means that the API also stores IPs for each request. 

#### Graph: Movie recommendations 
Represents movies and connections between them. Each node represents a movie and each edge holds the number of requests of promoting similarity between the connected movies.

All informations about movies will be acquired using [OMDb API](https://www.omdbapi.com/).

---
**Movie properties:**

- imdbId `(Number)` : Unique IMDB identifier. 
- title `(String)` : Movie title.
- released `(Number)` :  The year movie was made

**Relationship: SIMILAR**

`SIMILAR` is a relationship between two nodes that indicates similarity between movies.

Properties:
- promotions `(Number)` : Number of requests of promoting similarity between the connected movies. 

## Group Development toolset and techniques
All the information regarding the development techniques used and tools description can be found on GitHub:
- [Construction tools](https://github.com/lzontar/GrafMuvi/blob/master/docs/Construction_tools.md)
- [CI/CD](https://github.com/lzontar/GrafMuvi/blob/master/docs/CI.md)
- [Buildtool](https://github.com/lzontar/GrafMuvi/blob/master/docs/Buildtool.md)
- [Test-driven development](https://github.com/lzontar/GrafMuvi/blob/master/docs/Test-driven_development.md)
- [Deployment](https://github.com/lzontar/GrafMuvi/blob/master/docs/Deployment.md)
- [Containerization](https://github.com/lzontar/GrafMuvi/blob/master/docs/ContainerizationCo.md)
- [Provisioning](https://github.com/lzontar/GrafMuvi/blob/master/docs/Provisioning.md)
rov
## Group HTTP Requests

### Allowed HTTPs requests:
<pre>
POST    : Update or create connection of similar movies
GET     : Get an ordered list of movie recommendations
</pre>

### Description Of Usual Server Responses:
- 200 `OK` - the request was successful (some API calls may return 201 instead).
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 404 `Not Found` - resource was not found.

#### Retrieve movie recommendation list by IMDB ID [GET /id/{imdbId}]
+ Parameters
    + imdbId (Number) ... Unique IMDB movie identifier. 

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "1": "Godfather"
                "2": "Training day",
                "3": "Black mass",
            }
+ Response 404 (application/json)

        {
            "error": "error.not_found",
            "source": "Neo4j database"
        }
#### Retrieve movie recommendation list by movie title [GET /title/{title}/{year}]
+ Parameters
    + title (String) ... Movie title
    + year (Number) ... The year movie was made

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
                "1": "Godfather"
                "2": "Training day",
                "3": "Black mass",
            }
            
+ Response 404 (application/json)

        {
            "error": "error.not_found",
            "source": "Neo4j database"
        }
#### Update a movie recommendation by IMDB ID [POST /id]

+ Request (application/json)

        {
            "imdbId1" : "tt0765429"
            "imdbId2" : "tt0353496"
            "downgrade": false,
        }

+ Response 200 (application/json)

         {
            "title1" : "American gangster"
            "title2" : "Godfather"
            "promotions": 101,
        }
+ Response 400 (application/json)

        {
            errorCode: 400,
            description: "Rules listed under key 'rules' are not considered in your request. Check your request!",
            rules: {
              1:"Plots shouldn't be too different from each other (checked with word embedding method and cosine similarity function)",
              2:"Genres are connected to each other. Using these connections genres should be connected through at most 1 node (distance(node1, node2) <= 2).",
              3:"Since we need some time to watch an actual movie and only after that we can promote/downgrade a connection, we will limit the number of consecutive API request with less than 30 minutes between each other."
            }
          }
        
+ Response 404 (application/json)

        {
            "error": "error.not_found",
            "source": "OmdbAPI"
        }
+ Response 404 (application/json)

        {
            "error": "error.not_found",
            "source": "Neo4j database"
        }
#### Update a movie recommendation by title [POST /title]

+ Request (application/json)

        {
            "title1" : "American gangster"
            "released1" : 2007
            "title2" : "Godfather"
            "released2" : 1991
            "downgrade": true,
        }

+ Response 200 (application/json)

         {
            "title1" : "American gangster"
            "title2" : "Godfather"
            "promotions": 99,
        }

+ Response 400 (application/json)

        {
            errorCode: 400,
            description: "Rules listed under key 'rules' are not considered in your request. Check your request!",
            rules: {
              1:"Plots shouldn't be too different from each other (checked with word embedding method and cosine similarity function)",
              2:"Genres are connected to each other. Using these connections genres should be connected through at most 1 node (distance(node1, node2) <= 2).",
              3:"Since we need some time to watch an actual movie and only after that we can promote/downgrade a connection, we will limit the number of consecutive API request with less than 30 minutes between each other."
            }
          }
        
+ Response 404 (application/json)

        {
            "error": "error.not_found",
            "source": "OmdbAPI"
        }
+ Response 404 (application/json)

        {
            "error": "error.not_found",
            "source": "Neo4j database"
        }